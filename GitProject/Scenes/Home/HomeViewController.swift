//
//  HomeViewController.swift
//  Git
//
//  Created by anunes on 02/03/20.
//  Copyright (c) 2020 Santander Tecnologia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject {
    func displayGit(viewModel: Home.Git.ViewModel)
    func displayError(viewModel: Home.Git.GitError)
}


class HomeViewController: UIViewController, HomeDisplayLogic {
    private enum Constants {
        static  let msgErro = "Sistema indisponÃ­vel"
        static  let nameCell = GitHomeCell.nibName
        static let idCell = GitHomeCell.identifier
    }
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var listGit = [Home.Git.ViewModeRepresentable]()
    var isRequest = false
    var currentePage = 0

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        prepareLayout()
        doRequestGitSearch(currentPage: currentePage)
    }

    // MARK: Do something

    @IBOutlet weak var gitTableView: UITableView!
    @IBOutlet weak var indicator: UIActivityIndicatorView!
    func doRequestGitSearch(currentPage: Int) {
        indicator.startAnimating()
        let request = Home.Git.Request(page: currentPage, nameSearch: "language:Java", sort: "stars")
        interactor?.doInteractorGit(request: request)
    }

    func displayError(viewModel: Home.Git.GitError) {
        let alert = UIAlertController(title: "GitHub", message: Constants.msgErro, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Tentar novamente", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }

    func displayGit(viewModel: Home.Git.ViewModel) {
        self.listGit.append(contentsOf: viewModel.gitRepresentable)
        self.currentePage += 1
        isRequest = true
        self.gitTableView.reloadData()
        indicator.stopAnimating()

    }

    func prepareLayout() {
        indicator.hidesWhenStopped = true
        self.gitTableView.delegate = self
        self.gitTableView.dataSource = self

        self.gitTableView.estimatedRowHeight = 120
        self.gitTableView.rowHeight = 120
        self.gitTableView.register(UINib(nibName: Constants.nameCell, bundle: nil), forCellReuseIdentifier: Constants.idCell)
    }
}

extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        listGit.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = gitTableView.dequeueReusableCell(withIdentifier: GitHomeCell.identifier) as? GitHomeCell
        cell?.viewModel = listGit[indexPath.row]
        cell?.isAccessibilityElement = false
        cell?.contentView.isAccessibilityElement = false
        return cell ?? UITableViewCell()
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.getFullName(index: indexPath.row)
        performSegue(withIdentifier: "segueDetail", sender: self)
    }
}

extension HomeViewController {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        if offsetY > contentHeight - scrollView.frame.size.height && isRequest {
            doRequestGitSearch(currentPage: currentePage)
            isRequest = false
        }
    }
}
