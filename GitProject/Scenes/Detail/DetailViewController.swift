//
//  DetailViewController.swift
//  GitProject
//
//  Created by anunes on 09/03/20.
//  Copyright (c) 2020 Santander Tecnologia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: AnyObject {
    func displayGitDetail(viewModel: Detail.PullsRequest.ViewModel)
    func displayGitError(viewModel: Detail.PullsRequest.GitError)
}

class DetailViewController: UIViewController, DetailDisplayLogic {
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailDataPassing)?
    let nameCell = "DetailsCell"
    let idCell = "DetailsCellID"
    var listPulls = [Detail.PullsRequest.ViewModelRepresentable]()

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        doPulls()
    }

    // MARK: Do something

    @IBOutlet weak var detailTable: UITableView! {
        didSet {
            self.detailTable.delegate = self
            self.detailTable.dataSource = self

            self.detailTable.estimatedRowHeight = 160
            self.detailTable.rowHeight = 160
            self.detailTable.register(UINib(nibName: nameCell, bundle: nil), forCellReuseIdentifier: idCell)
        }
    }

    func doPulls() {
        if let fullName = interactor?.requestFullName {
            let request = Detail.PullsRequest.Request(fullName: fullName)
            interactor?.doPullsInteractor(request: request)
        }
    }

    func displayGitDetail(viewModel: Detail.PullsRequest.ViewModel) {
        listPulls.append(contentsOf: viewModel.pullRepresentable)
        detailTable.reloadData()
    }
    func displayGitError(viewModel: Detail.PullsRequest.GitError) {
    }
}
extension DetailViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
         listPulls.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = detailTable.dequeueReusableCell(withIdentifier: idCell) as? DetailsCell
        cell?.viewModel = listPulls[indexPath.row]
        cell?.isAccessibilityElement = false
        cell?.contentView.isAccessibilityElement = false
        return cell ?? UITableViewCell()
    }

}

extension DetailViewController: UITableViewDelegate {
}
