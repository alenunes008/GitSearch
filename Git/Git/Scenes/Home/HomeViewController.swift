//
//  HomeViewController.swift
//  Git
//
//  Created by anunes on 02/03/20.
//  Copyright (c) 2020 Santander Tecnologia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class {
    func displaySomething(viewModel: Home.Git.ViewModel)
    func displayError(viewModel: Home.Git.GitError)
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var gitList: Home.Git.ViewModel?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        prepareLayout()
        doSomething()
    }

    // MARK: Do something

    @IBOutlet weak var gitTableView: UITableView!

    func doSomething() {
        interactor?.doSomething(id: "1")
    }

    func displayError(viewModel: Home.Git.GitError) {
        //Tratar erro
    }

    func displaySomething(viewModel: Home.Git.ViewModel) {
        //nameTextField.text = viewModel.name
        self.gitList = viewModel
        self.gitTableView.reloadData()
    }

    func prepareLayout() {
        self.gitTableView.delegate = self
        self.gitTableView.dataSource = self
        self.gitTableView.estimatedRowHeight = 120
        self.gitTableView.rowHeight = 120

        self.gitTableView.register(UINib(nibName: GitHomeCell.nibName, bundle: nil), forCellReuseIdentifier: GitHomeCell.identifier)
    }
}


extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return gitList?.gitRepresentable.count ?? 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = gitTableView.dequeueReusableCell(withIdentifier: GitHomeCell.identifier) as! GitHomeCell
          cell.viewModel = gitList?.gitRepresentable[indexPath.row]

        cell.isAccessibilityElement = false
        cell.contentView.isAccessibilityElement = false
        return cell
    }

}
